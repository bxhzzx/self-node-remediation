apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: '[]'
    capabilities: Basic Install
    categories: OpenShift Optional
    containerImage: quay.io/medik8s/self-node-remediation-operator:latest
    createdAt: "2022-06-28 14:27:16"
    description: Self Node Remediation Operator for remediate itself in case of a
      failure.
    olm.skipRange: '>=0.1.0 <0.4.0'
    repository: https://github.com/medik8s/self-node-remediation
    support: Medik8s
  name: self-node-remediation.v0.0.0
  namespace: placeholder
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
    - description: SelfNodeRemediationConfig is the Schema for the selfnoderemediationconfigs
        API in which a user can configure the self node remediation agents
      displayName: Self Node Remediation Config
      kind: SelfNodeRemediationConfig
      name: selfnoderemediationconfigs.self-node-remediation.medik8s.io
      resources:
      - kind: SelfNodeRemediationConfig
        name: selfnoderemediationconfigs
        version: v1alpha1
      version: v1alpha1
    - description: SelfNodeRemediation is the Schema for the selfnoderemediations
        API
      displayName: Self Node Remediation
      kind: SelfNodeRemediation
      name: selfnoderemediations.self-node-remediation.medik8s.io
      resources:
      - kind: SelfNodeRemediation
        name: selfnoderemediations
        version: v1alpha1
      statusDescriptors:
      - description: LastError captures the last error that occurred during remediation.
          If no error occurred it would be empty
        displayName: Last Error
        path: lastError
      - description: NodeBackup is the node object that is going to be deleted as
          part of the remediation process
        displayName: Node Backup
        path: nodeBackup
      - description: 'Phase represents the current phase of remediation, One of: TBD'
        displayName: Phase
        path: phase
      - description: TimeAssumedRebooted is the time by then the unhealthy node assumed
          to be rebooted
        displayName: Time Assumed Rebooted
        path: timeAssumedRebooted
      version: v1alpha1
    - description: SelfNodeRemediationTemplate is the Schema for the selfnoderemediationtemplates
        API
      displayName: Self Node Remediation Template
      kind: SelfNodeRemediationTemplate
      name: selfnoderemediationtemplates.self-node-remediation.medik8s.io
      resources:
      - kind: SelfNodeRemediationTemplate
        name: selfnoderemediationtemplates
        version: v1alpha1
      specDescriptors:
      - description: Template defines the desired state of SelfNodeRemediationTemplate
        displayName: Template
        path: template
      version: v1alpha1
  description: This self node remediation operator is using an alternate mechanism
    for a node in a cluster to detect its health status and take actions to remediate
    itself in case of a failure. While not all remediation events can result in the
    node returning to a healthy state, the operator does allow surviving parts of
    the cluster to assume the node has reached a safe state so that itâ€™s workloads
    can be automatically recovered. A prerequesuite for the self node remediation
    operator is a functioning health detection system that implements the external
    remediation API, such as Node Healthcheck Operator, Machine Healthcehck Controller
    (in OCP or Cluster-API based clusters). Once a node/machine is unhealthy, the
    detection system will create the SelfNodeRemediation CR, which triggers the self
    node remediation operator. To get started, a user would need to create a SelfNodeRemediationTemplate,
    and reference that CR with an NHC/MHC CR.
  displayName: Self Node Remediation Operator
  icon:
  - base64data: 
    mediatype: image/png
  install:
    spec:
      deployments: null
    strategy: ""
  installModes:
  - supported: false
    type: OwnNamespace
  - supported: false
    type: SingleNamespace
  - supported: false
    type: MultiNamespace
  - supported: true
    type: AllNamespaces
  keywords:
  - fencing
  - remediation
  - auto-healing
  - recovery
  - high-availability
  - baremetal
  - SNR
  links:
  - name: Self Node Remediation
    url: https://medik8s.io
  - name: Source Code
    url: https://github.com/medik8s/self-node-remediation
  maintainers:
  - email: medik8s@googlegroups.com
    name: medik8s team
  maturity: alpha
  minKubeVersion: 1.20.0
  provider:
    name: medik8s
    url: https://www.medik8s.io/
  version: 0.0.0
